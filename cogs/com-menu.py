import os
import discord
from discord.ext import commands
from utils.predata import load_data
from utils.time_series import predict_future_complaints
from utils.heatmap import generate_problem_heatmap

class PredictModal(discord.ui.Modal, title="üîç ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå"):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.add_item(discord.ui.TextInput(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£, ‡∏†‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥"))
        self.add_item(discord.ui.TextInput(label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£)"))

    async def on_submit(self, interaction: discord.Interaction):
        try:
            problem_type = self.children[0].value.strip()
            province = self.children[1].value.strip()
            
            if not problem_type or not province:
                await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", ephemeral=True)
                return

            data = load_data()
            prediction, graph_path = predict_future_complaints(data, problem_type, province)

            if prediction is None or graph_path is None:
                await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
                return

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed
            embed = discord.Embed(
                title="üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ‡∏´‡∏ô‡πâ‡∏≤",
                description=f"üîπ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤: **{problem_type}**\nüîπ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: **{province}**\nüìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: **{prediction}**",
                color=discord.Color.yellow()
            )

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `assets/graphs` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not os.path.exists(graph_path):
                await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏≤‡∏ü ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
                return

            # ‚úÖ ‡∏™‡πà‡∏á Embed + ‡∏£‡∏π‡∏õ‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏õ‡∏¢‡∏±‡∏á DM
            user = interaction.user
            try:
                await user.send(embed=embed)
                await user.send(file=discord.File(graph_path))
                await interaction.response.send_message("üì© **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á DM ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß**", ephemeral=True, delete_after=5)
            except discord.Forbidden:
                await interaction.response.send_message("‚ùå **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÑ‡∏î‡πâ** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!", ephemeral=True, delete_after=5)

        except Exception as e:
            print(f"üî¥ Error in ComplaintModal: {e}")
            await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

class FrequentProblemsModal(discord.ui.Modal, title="üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.add_item(discord.ui.TextInput(label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"))

    async def on_submit(self, interaction: discord.Interaction):
        
        try:
            province = self.children[0].value.strip()

            if not province:
                await interaction.response.send("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", ephemeral=True)
                return

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
            data = load_data()

            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generate_problem_heatmap ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            top_problems, graph_path = generate_problem_heatmap(data, province=province)

            if top_problems is None or graph_path is None:
                await interaction.response.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province}", ephemeral=True)
                return

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            embed = discord.Embed(
                title=f"üìä ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô `{province}`",
                description="‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å*‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢*",
                color=discord.Color.blue()
            )

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)
            embed.add_field(name="üìå ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", value=top_problems, inline=False)

            # ‚úÖ ‡∏™‡πà‡∏á Embed + ‡∏£‡∏π‡∏õ‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏õ‡∏¢‡∏±‡∏á DM
            user = interaction.user
            try:
                await user.send(file=discord.File(graph_path))
                await user.send(embed=embed)
                await interaction.response.send_message("üì© **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á DM ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß**", ephemeral=True, delete_after=5)
            except discord.Forbidden:
                await interaction.response.send_message("‚ùå **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÑ‡∏î‡πâ** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!", ephemeral=True, delete_after=5)

        except Exception as e:
            print(f"üî¥ Error in FrequentProblemsModal: {e}")
            await interaction.response.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

class ComMenu(discord.ui.View):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot

    @discord.ui.button(label="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå", style=discord.ButtonStyle.primary)
    async def predict_complaint(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.send_modal(PredictModal(self.bot))  # ‡πÄ‡∏õ‡∏¥‡∏î Modal
        except Exception as e:
            print(f"üî¥ Error in predict_complaint: {e}")
            await interaction.response.send_message(f"‚ùå Error: {str(e)}", ephemeral=True)

    @discord.ui.button(label="‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢", style=discord.ButtonStyle.secondary)
    async def problemBtn(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.send_modal(FrequentProblemsModal(self.bot))
        except Exception as e:
            print(f"üî¥ Error in evaluateBtn: {e}")
            await interaction.response.send_message(f"‚ùå Error: {str(e)}", ephemeral=True)


    @discord.ui.button(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤", style=discord.ButtonStyle.green)
    async def evaluateBtn(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.send_message("üí¨ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: (‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)", ephemeral=False)
        except Exception as e:
            print(f"üî¥ Error in evaluateBtn: {e}")
            await interaction.response.send_message(f"‚ùå Error: {str(e)}", ephemeral=True)

class ComMenuCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="commenu", description="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå")
    async def com_menu(self, ctx):
        try:
            print("üü¢ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !commenu ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            view = ComMenu(self.bot)
            embed = discord.Embed(
                title="üì¢ ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå",
                description="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
                color=discord.Color.blue()
            )
            await ctx.send(embed=embed, view=view)
        except Exception as e:
            print(f"üî¥ Error in com_menu: {e}")
            await ctx.send(f"‚ùå Error: {str(e)}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Cog ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö bot
async def setup(bot):
    await bot.add_cog(ComMenuCog(bot))
