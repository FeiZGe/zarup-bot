import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import os
from statsmodels.tsa.arima.model import ARIMA

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Matplotlib
font_path = os.path.join(os.path.dirname(__file__), "../assets/fonts/Prompt-Regular.ttf")
font_prop = fm.FontProperties(fname=font_path)

# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
GRAPH_DIR = os.path.join(os.path.dirname(__file__), "../assets/graphs")
os.makedirs(GRAPH_DIR, exist_ok=True)

def predict_future_complaints(data, problem_type, province):
    # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (‡∏£‡∏≤‡∏¢‡∏õ‡∏µ) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü

    try:
        if "work_year" not in data.columns:
            raise ValueError("‚ùå DataFrame ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'work_year'!")

        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        filtered_data = data[(data["Problem_Type"] == problem_type) & (data["province"] == province)]
        if filtered_data.empty:
            raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó '{problem_type}' ‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î '{province}'")

        # ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
        filtered_data = (
            filtered_data.groupby("work_year")["Total"]
            .sum()
            .reset_index()
        )

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ index ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
        filtered_data["date"] = pd.to_datetime(filtered_data["work_year"].astype(str) + "-12-31")
        filtered_data.set_index("date", inplace=True)
        filtered_data = filtered_data.asfreq("YE")  

        if len(filtered_data) < 5:  
            raise ValueError("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ARIMA (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏õ‡∏µ)")

        # ‡πÉ‡∏ä‡πâ ARIMA ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        model = ARIMA(filtered_data["Total"], order=(2, 1, 0))  
        model_fit = model.fit()
        prediction = model_fit.forecast(steps=1)
        predicted_value = round(prediction.iloc[0])  

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
        filename = f"complaints_{problem_type}_{province}.png".replace(" ", "_")
        filepath = os.path.join(GRAPH_DIR, filename)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if os.path.exists(filepath):
            return predicted_value, filepath

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        plt.figure(figsize=(8, 5))
        plt.plot(filtered_data.index, filtered_data["Total"], marker="o", linestyle="-", label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á", color="blue")
        plt.axvline(filtered_data.index[-1], color="gray", linestyle="--", label="‡∏à‡∏∏‡∏î‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
        plt.scatter(pd.to_datetime(f"{filtered_data.index[-1].year + 1}-12-31"), predicted_value, color="red", label=f"‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: {predicted_value}")
        plt.xlabel("‡∏õ‡∏µ", fontproperties=font_prop)
        plt.ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå", fontproperties=font_prop)
        plt.title(f"üìä ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ({problem_type} - {province})", fontproperties=font_prop)
        plt.legend(prop=font_prop)
        plt.grid(True)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        plt.savefig(filepath, format="png", dpi=100, bbox_inches="tight")
        plt.close()

        return predicted_value, filepath

    except Exception as e:
        print(f"üî¥ Error in predict_future_complaints: {e}")
        return None, None
