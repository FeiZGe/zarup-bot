import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sns
import os
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import OneHotEncoder

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Matplotlib
font_path = os.path.join(os.path.dirname(__file__), "../assets/fonts/Prompt-Regular.ttf")
font_prop = fm.FontProperties(fname=font_path)

# ‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
GRAPH_DIR = os.path.join(os.path.dirname(__file__), "../assets/graphs")
os.makedirs(GRAPH_DIR, exist_ok=True)

def cluster_frequent_problems(data, province, n_clusters=7):
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ K-Means Clustering
    try:
        # ‚úÖ ‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        data = data[data["province"] == province]

        if data.empty:
            raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province}")

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        problem_counts = data.groupby("Problem_Type")["Total"].sum().reset_index()
        problem_counts = problem_counts.sort_values(by="Total", ascending=False)

        # ‚úÖ ‡πÉ‡∏ä‡πâ One-Hot Encoding
        encoder = OneHotEncoder(sparse_output=False)
        encoded_data = encoder.fit_transform(problem_counts[["Problem_Type"]])

        # ‚úÖ ‡πÉ‡∏ä‡πâ PCA ‡∏•‡∏î‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2D
        pca = PCA(n_components=2)
        reduced_data = pca.fit_transform(encoded_data)

        # ‚úÖ ‡πÉ‡∏ä‡πâ K-Means Clustering
        model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        clusters = model.fit_predict(reduced_data)

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        problem_counts["Cluster"] = clusters

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÉ‡∏´‡πâ Legend (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°)
        cluster_labels = {
            i: ", ".join(problem_counts[problem_counts["Cluster"] == i]["Problem_Type"].values)
            for i in range(n_clusters)
        }

        # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
        plt.figure(figsize=(8, 6))
        scatter = sns.scatterplot(
            x=reduced_data[:, 0], 
            y=reduced_data[:, 1],  
            hue=[cluster_labels[c] for c in clusters], 
            palette="Set1",
            alpha=0.7
        )

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        for i, txt in enumerate(problem_counts["Problem_Type"]):
            plt.annotate(txt, (reduced_data[i, 0], reduced_data[i, 1]), fontsize=10, alpha=0.75, fontproperties=font_prop)

        plt.title(f"üîç ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô {province}", fontproperties=font_prop)
        plt.xlabel("‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", fontproperties=font_prop)
        plt.ylabel("‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", fontproperties=font_prop)
        plt.legend(prop=font_prop)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü
        graph_path = os.path.join(GRAPH_DIR, f"cluster_{province}.png")
        plt.savefig(graph_path, dpi=100, bbox_inches="tight")
        plt.close()

        # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Embed
        top_problems = "\n".join(
            [f"**{row['Problem_Type']}**: {row['Total']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á" for _, row in problem_counts.iterrows()]
        )

        return top_problems, graph_path
    
    except Exception as e:
        print(f"üî¥ Error in cluster_frequent_problems: {e}")
        return None, None
